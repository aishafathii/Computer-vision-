# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NkGGvJHiUieh9LZa8t0sWX_P6XID_V2J
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def find_corners2(img, ksize, w, sigma):
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  gray = np.float32(gray)
  gray = cv2.GaussianBlur(gray, ksize=(ksize, ksize), sigmaX=0.5, sigmaY=0.5)
  Ix = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=ksize)
  Iy = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=ksize)

  grey_xx = cv2.GaussianBlur(Ix * Ix, (w, w), sigmaX=0.5, sigmaY=0.5)
  grey_yy = cv2.GaussianBlur(Ix * Iy, (w, w), sigmaX=0.5, sigmaY=0.5)
  grey_xy = cv2.GaussianBlur(Iy * Iy, (w, w), sigmaX=0.5, sigmaY=0.5)

  rows, cols = gray.shape
  R = np.zeros((rows,cols))
  import math
  for i in range (rows):
      for j in range(cols):
          R[i][j] = (grey_xx[i][j]*grey_yy[i][j] - grey_xy[i][j]*grey_xy[i][j]) - 0.05*(pow(grey_xx[i][j]+grey_yy[i][j],2))

  for i in range (rows):
   for j in range(cols):    
       if(200000000 < R[i][j]):
           print(R[i][j], ' ', i,' ',j)

  img[R > 200000000] = [0, 0, 255]
  img[R < -200000000] = [0, 0, 255]
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  plt.imshow(img)
  plt.show()

def corners(img):
  plt.imshow(img)
  plt.show()
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  gray = np.float32(gray)
  dst = cv2.cornerHarris(gray, 2, 3, 0.04)
  dst = cv2.dilate(dst, None)
  img[dst > 0.01 * dst.max()] = [0, 0, 255]
  plt.imshow(img)
  plt.show()

from google.colab import files
#files.upload()
import matplotlib.image as mpimg
img = cv2.imread('/content/download.jpg')
find_corners2(img, 3, 3, 0.05)
#corners(img)