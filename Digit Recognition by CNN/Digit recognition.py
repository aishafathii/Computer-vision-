# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O6vrNTrd2wW-T2sWYefxKUtgxeGv_BE6
"""

import keras
import numpy as np
from google.colab import files
import json
from sklearn.metrics import classification_report,accuracy_score
import zipfile

files.upload()
!mkdir -p  ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json
!kaggle competitions download -c digit-recognizer

local_zip = 'train.csv.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/train/')
zip_ref.close()

import pandas as pd
train = pd.read_csv("/train/train.csv")
print(train.shape)


Y = train["label"].values
X = train.drop(labels=["label"],axis=1).values

print("y_train shape:",Y.shape)
print("x_train shape:",X.shape)

from sklearn.model_selection import train_test_split
X = X.reshape([42000,28,28,1])
Y = Y.reshape([42000,1])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 14)
x_train, x_validation, y_train, y_validation = train_test_split(x_train, y_train, test_size = 0.2, random_state = 14)

print(x_train.shape)
print(y_train.shape)
print(x_validation.shape)
print(y_validation.shape)
print(x_test.shape)
print(y_test.shape)

# Building the model
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation

model = tf.keras.Sequential()
model.add(Conv2D(32, (3,3), padding = 'same', activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(2, 2))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3,3), padding = 'same', activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(128, (3,3), padding = 'same', activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(10, activation='softmax'))
model.summary()

model.compile(
   loss = 'categorical_crossentropy', optimizer = 'sgd', metrics = ['accuracy']
)

labels_train = tf.keras.utils.to_categorical(y_train)
labels_val= tf.keras.utils.to_categorical(y_validation)
labels_test= tf.keras.utils.to_categorical(y_test)
history = model.fit(x_train, labels_train, batch_size = 32, epochs = 35, validation_data = (x_validation, labels_val))

# Save the model
model.save("model.h5")

# Testing
local_zip = 'test.csv.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/test/')
zip_ref.close()

test = pd.read_csv("/test/test.csv")
data = test.values
data = data.reshape([28000,28,28,1])
test_pred = model.predict(data)
test_pred = np.argmax(test_pred,axis=1)
print(test_pred.shape)


# Prediction
test = test.values
for i in range(10):
  test_sample = test[i].reshape(28,28)
  plt.imshow(test_sample)
  plt.title(f'Predict Digit: {test_pred[i]}')
  plt.colorbar()
  plt.show()


# Model evaluation
model.evaluate((x_train, labels_train,x_validation, labels_val))
model.evaluate(x_test,labels_test)